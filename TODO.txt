# TODO List:
General:
    struct pos  //type
    {
       float x,
       float y,
       float z
       ...
    };
    typedef struct pos Position;
    Position desired, error, measured;  //instantiate a struct of type record
    
    int idle =1;
    int flight =2;
    
    int flight_mode = idle;
    int motor_min= 900;
    int motor_start= 1000;
    int motor_max= 2000;
      Servo fl;
      Servo fr;
      Servo bl;
      Servo br;
    
    
    
    void setup_motors(void){
      fl.attach(fl_pin, motor_min, motor_max);
      fr.attach(fr_pin, motor_min, motor_max);
      bl.attach(bl_pin, motor_min, motor_max);
      br.attach(br_pin, motor_min, motor_max);
      
      if (!CALIBRATION_MODE){      
        fl.writeMicroseconds(motor_min);
        fr.writeMicroseconds(motor_min);
        bl.writeMicroseconds(motor_min);
        br.writeMicroseconds(motor_min);
      }
      
    }
    
    void cal_esc(void){
      Serial.flush();
      if (CALIBRATION_MODE){      
        fl.writeMicroseconds(motor_max);
        fr.writeMicroseconds(motor_max);
        bl.writeMicroseconds(motor_max);
        br.writeMicroseconds(motor_max);
      }
      Serial.println("plug in ESCs, beeps will increase in pitch, followed by a beep matching the pitch, press any key to continue...");
      while(!Serial.availiable());
      Serial.flush();
      
      int i;
      for(i=motor_max; i>=motor_min; i--){
        fl.writeMicroseconds(i);
        fr.writeMicroseconds(i);
        bl.writeMicroseconds(i);
        br.writeMicroseconds(i);
        delay(2);
      }
      
      Serial.println("Throtled down to the low end, two beeps of the same pitch should be emitted, press any key to cont");
      while(!Serial.availiable());
      Serial.flush();
      
      for(i=motor_min; i<=motor_start; i++){
        fl.writeMicroseconds(i);
        fr.writeMicroseconds(i);
        bl.writeMicroseconds(i);
        br.writeMicroseconds(i);
        delay(2);
      }
      
      Serial.println("Throtled up to start, three beeps should be emitted, press any key to cont");
      while(!Serial.availiable());
      Serial.flush();
    
    }
    
Calibration:
1
Set the radio throttle or servo tester to the highest position, then connect power to the ESC. The 
motor should produce a series of initialization beeps increasing in pitch, followed by another beep 
matching the pitch of the last initialization beep. This indicates that the calibration mode has been 
entered, and the pulse length has been learned.
2
Move the stick or knob to the lowest position. Two beeps of the same pitch should be emitted. This
indicates that the low pulse length has been learned. 
3
If the RC Car-style reversible mode has been 
enabled (RC_PULS_NEUTRAL), move the stick or knob to the center, and wait for three beeps. This 
indicates that the neutral (center) pulse length has been learned
  
  
  
Sensor(Embedded Software)
  -Tune Cfilter
  -Consider characterising the noise in each axis
  -Vibration testing/ re-tune when the PID works?
  -Consider Kalman Filter? -can probably steal from other repo
  -Pressure sensor
  -
  
  
LIPO contol with MKR VIDOR
  -assess battery options?

CMND/STATUS (Embedded Software/ Ground Software)
&&&****ADD ARDUINO_SECRETS TO GITIGNORE****&&&
    - get UDP to PC working. (bi-directional)  WIFI_NINA
    
    - create a struct for telem: https://forum.arduino.cc/index.php?topic=42681.0
    add a function for easy JSON creation.
    
    struct pos  //type
    {
       float ms,
       float x,
       ...
    };
    typedef struct record Record;
    Record rinstance;//instantiate a struct of type record



        
    
    -add failsafe for loosing connection/ corrupt data
    
    - Side task: get a streaming ability to server mysql to capture timestamps and values.  Accept JSON in the following format?:
      {"time":,"telem":{"cx": , "cy":, "cz":, "dx":,"dy":,"dz":,"dt":...}}
         time(ms)   measured pos(deg),    desired pos(deg),   desired throtle(deg)
         Plot the MYSQL values>? need to make a db.
    
PWM (Embedded Software)
  -test arduino libraries with ESC 
  -test vidor output(5v pwm vs 3v3)!!
  -Create function/wrapper for writing to the ESCs
  -Create Calibrate ESC function
  
PID (Embedded Software)
  -Impliment Flight Controller (one per axis?)
  -esure KI windup cannot happen on the ground
  -Tune
  
General (Embedded Software)
  -add failsafe for loosing connection/ corrupt data

Hardware
  -Use Protoboard
  -Buy headers (4x3PIN for ESCs), potentially more for redundancy, RC controller
  -Buy RC contoller
  -Mount the IMU on rubber onto the protoboard. Consider soldering in place to add mass and ruberixing the whole flight board?
  -Charge batteries
  -Add "RollCage" Before flight
  -Add "Killswitch" before flight
  
  
  
  Done
    -Read Gyro/Accelerometer
  
    
  
  
  


